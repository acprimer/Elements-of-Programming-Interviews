package chap05;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by yaodh on 2015/1/19.
 * <p/>
 * Problem 5.9
 * Let A be an array of n integers. Write an encode function that returns a string
 * representing the concatenation of the Elias gamma codes for < A[0], A[1], ..., A[n-1] >
 * in that order, and a decode function that takes a string s assumed to be generated by
 * the encode function, and returns the array that was passed to the encode function.
 */
public class Problem05_09 {
    String encode(int[] A) {
        StringBuilder builder = new StringBuilder();
        for (int x : A) {
            builder.append(transIntToBinary(x));
        }
        return builder.toString();
    }

    private String transIntToBinary(int x) {
        int count = 0;
        StringBuilder builder = new StringBuilder();
        while (x != 0) {
            builder.append(((x & 0x01) == 0) ? '0' : '1');
            x >>= 1;
            count++;
        }
        for (int i = 1; i < count; i++) {
            builder.append('0');
        }
        return builder.reverse().toString();
    }

    List decode(String str) {
        List<Integer> numbers = new ArrayList<Integer>();
        for (int i = 0; i < str.length(); i++) {
            // count the number of consecutive 0s
            int zeroIdx = i;
            while (zeroIdx < str.length() && str.charAt(zeroIdx) == '0') {
                zeroIdx++;
            }
            i = zeroIdx + zeroIdx - i;
            numbers.add(transBinaryToInt(str.substring(zeroIdx, i + 1)));
        }
        return numbers;
    }

    private Integer transBinaryToInt(String str) {
        int ans = 0;
        for (int i = 0; i < str.length(); i++) {
            ans = (ans << 1) + str.charAt(i) - '0';
        }
        return ans;
    }

    public static void main(String[] args) {
        String ans = new Problem05_09().encode(new int[]{13, 12});
        System.out.println(ans);
        List<Integer> numbers = new Problem05_09().decode("00011010001100");
        for (int x : numbers) {
            System.out.println(x);
        }
    }
}
